// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Team.Infrastructure;

#nullable disable

namespace Team.Infrastructure.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Team.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Detail")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("DATE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("DATE");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Projects");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("Team.Domain.Entities.ProjectClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(30)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ProjectClients");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectClients", (string)null);
                });

            modelBuilder.Entity("Team.Domain.Entities.ProjectDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("Id")
                        .HasName("PK_ProjectDocuments");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDocuments", (string)null);
                });

            modelBuilder.Entity("Team.Domain.Entities.ProjectMilestone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ProjectMilestones");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMilestones", (string)null);
                });

            modelBuilder.Entity("Team.Domain.Entities.ProjectResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ProjectResources");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ProjectResources", (string)null);
                });

            modelBuilder.Entity("Team.Domain.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(25)");

                    b.Property<string>("Phone")
                        .HasColumnType("NVARCHAR(30)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Resources");

                    b.ToTable("Resources", (string)null);
                });

            modelBuilder.Entity("Team.Domain.Entities.ProjectClient", b =>
                {
                    b.HasOne("Team.Domain.Entities.Project", "Project")
                        .WithMany("ProjectClients")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProjectClients_Projects");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Team.Domain.Entities.ProjectDocument", b =>
                {
                    b.HasOne("Team.Domain.Entities.Project", "Project")
                        .WithMany("ProjectDocuments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProjectDocuments_Projects");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Team.Domain.Entities.ProjectMilestone", b =>
                {
                    b.HasOne("Team.Domain.Entities.Project", "Project")
                        .WithMany("ProjectMilestones")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProjectMilestones_Projects");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Team.Domain.Entities.ProjectResource", b =>
                {
                    b.HasOne("Team.Domain.Entities.Project", "Project")
                        .WithMany("ProjectResources")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProjectResources_Projects");

                    b.HasOne("Team.Domain.Entities.Resource", "Resource")
                        .WithMany("ProjectResources")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProjectResources_Resources");

                    b.Navigation("Project");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Team.Domain.Entities.Project", b =>
                {
                    b.Navigation("ProjectClients");

                    b.Navigation("ProjectDocuments");

                    b.Navigation("ProjectMilestones");

                    b.Navigation("ProjectResources");
                });

            modelBuilder.Entity("Team.Domain.Entities.Resource", b =>
                {
                    b.Navigation("ProjectResources");
                });
#pragma warning restore 612, 618
        }
    }
}
